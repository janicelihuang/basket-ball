{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setResults","html","setState","showDetails","resultData","state","showResults","queryResult","nameQuery","teamQuery","oppQuery","detailsData","_this2","react_default","a","createElement","className","style","color","type","placeholder","value","onChange","updatedText","target","onClick","getResults","query","showSentimentGraph","name","es","data","columns","Header","accessor","getTdProps","rowinfo","column","instance","e","handleOriginal","getDetails","original","dataString","$","ajax","method","url","team","opp","done","catch","error","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea94c411.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css'\nimport $ from \"jquery\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = { \n      showResults: false,\n      queryResult: null,\n      nameQuery: '',\n      teamQuery: '',\n      oppQuery: '',\n      resultData: null,\n      showDetails: false,\n      detailsData: null\n    };\n  }\n\n  render() {\n    const columns = [{\n            Header: 'Name',\n            accessor: 'name' // String-based value accessors!\n          }, {\n            Header: 'Date',\n            accessor: 'date'\n          }, {\n            Header: 'Team',\n            accessor: 'team'\n          }, {\n            Header: 'Opposition',\n            accessor: 'opposition'\n          }, {\n            Header: 'Win Margin',\n            accessor: 'winmargin'\n          }, {\n            Header: 'Minutes Played',\n            accessor: 'minutesplayed'\n          }, {\n            Header: \"Three Pointers\",\n            accessor: 'tpm'\n          }, {\n            Header: \"Free Throws\",\n            accessor: 'ftm'\n          }, {\n            Header: \"Assists\",\n            accessor: 'assists'\n          }, {\n            Header: \"Steals\",\n            accessor: 'steals'\n          }, {\n            Header: 'Blocks',\n            accessor: 'blocks',\n          }, {\n            Header: 'Turnovers',\n            accessor: 'turnovers'\n          }, {\n            Header: 'Points',\n            accessor: 'points'\n          }, {\n            Header: 'Game Score',\n            accessor: 'gamescore'\n          }\n    ];\n\n    return (\n      <div className=\"App\">\n          <h1 style={{color:'orange'}}>Basket Ball</h1>\n          <h3>Look up a player's performance during a specific game</h3>\n          <div>\n            Name: <input type=\"text\" placeholder={\"Player Name\"} value={this.state.nameQuery} onChange={(updatedText)=>this.setState({nameQuery: updatedText.target.value})}/>\n          </div>\n          <div>\n            Team: <input type=\"text\" placeholder={\"e.g. BOS\"} value={this.state.teamQuery} onChange={(updatedText)=>this.setState({teamQuery: updatedText.target.value})}/>\n          </div>\n          <div>\n            Opposition: <input type=\"text\" placeholder={\"e.g. PHI\"} value={this.state.oppQuery} onChange={(updatedText)=>this.setState({oppQuery: updatedText.target.value})}/>\n          </div>\n          <button onClick={() => {\n            this.setState({showResults: true});\n            this.getResults();\n          }}>Search</button>\n          <button onClick={() => this.setState({showResults: false, query: '', showSentimentGraph: false})}>Reset</button>\n        {this.state.showDetails && this.state.detailsData &&  \n          <div>\n            {this.state.detailsData.name}\n          </div>\n        }\n        {this.state.showResults && this.state.resultData &&  \n            <ReactTable\n                data={this.state.resultData}\n                columns={columns}\n                getTdProps={(state, rowinfo, column, instance) => {\n                  return {\n                    onClick: (e, handleOriginal) => {\n                      if (rowinfo) {\n                        this.getDetails(rowinfo.original);\n                      }\n                      if(handleOriginal) {\n                        handleOriginal();\n                      }\n                    }\n                  }\n                }}\n            />\n        }\n      </div>\n    );\n  }\n  \n  getDetails(dataString) {\n    // we will query twitter db for the player name, then set data to state, then display chart (points vs sentiment)\n    this.setState({detailsData: dataString});\n  }\n\n  setResults = (html) => {\n    this.setState({showDetails: true, resultData: html});\n  }\n\n  getResults() {\n    $.ajax({\n      method: \"GET\",\n      url: \"/api/search/\",\n      data: {name: this.state.nameQuery, team: this.state.teamQuery, opp: this.state.oppQuery}\n    }).done(this.setResults)\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}